@page "/{url}"
@layout Layout.LayoutSecundario;
@using guslinks.Components.Models;
@using guslinks.Components.Listas;

    @if (carregarConteudo)
    {
        <img class="img-perfil" src="imagens/perfil/@imgPerfil" />

        <div class="nome-perfil">@usuarios.listaUsuarios.FirstOrDefault(c => c.id == usuarioAtual).nome</div>

        <div class="texto-perfil">@usuarios.listaUsuarios.FirstOrDefault(c => c.id == usuarioAtual).texto</div>

        @foreach (var link in linksUsuario.OrderBy(c => c.ordem))
        {
            <a class="links" href="@link.link"><div class="bt-links">@link.texto</div></a>
        }

        <div class="ico-links">
            @foreach (var rede in redesUsuario.OrderBy(c => c.ordem))
            {
                <a class="links" href="@rede.link"><i class="bi @icones.listaIcones.FirstOrDefault(c => c.id == rede.icone).icoRede"></i></a>        
            }
        </div>

        <style>

            html, body {
                background-color: @configUsuario.planofundo_cor;
                background-image: url("/imagens/fundo/@configUsuario.planofundo_img");
            }

            .img-perfil {border-color: @configUsuario.imgperfil_borda_cor;}

            .nome-perfil {
                font-family: @configUsuario.nome_fonte;
                color: @configUsuario.nome_cor;
            }

            .texto-perfil {
                font-family: @configUsuario.texto_fonte;
                color: @configUsuario.texto_cor;
            }

            .links {color: @configUsuario.link_texto_cor;}

            .bt-links {
                background-color: @configUsuario.link_fundo_cor;
                border-color: @configUsuario.link_borda_cor;
                font-family: @configUsuario.link_texto_fonte;
            }

            .bi {color: @configUsuario.icone_cor;}

            .texto-rodape {color: @configUsuario.nome_cor;}

            .link-rodape {color: @configUsuario.nome_cor;}

        </style>
    }



@code {
    [Parameter]
    public string url { get; set; }
    public int usuarioAtual { get; set; }
    public List<Links> linksUsuario { get; set; }
    public List<Redes> redesUsuario { get; set; }
    public Configuracoes configUsuario { get; set; }
    public string imgPerfil { get; set; }
    public bool carregarConteudo = false;

    public ListaUsuarios usuarios { get; set; }
    public ListaLinks links { get; set; }
    public ListaRedes redes { get; set; }
    public ListaIcones icones { get; set; }
    public ListaConfiguracoes config { get; set; }

    protected override async Task OnInitializedAsync()
    {
        usuarios = new();
        links = new();
        redes = new();
        icones = new();
        config = new();

        if (url != null & url != "favicon.png")
        {
            carregarConteudo = true;
            usuarioAtual = usuarios.listaUsuarios.FirstOrDefault(u => u.link == url).id;
            linksUsuario = links.listaLinks.Where(l => l.idUsuario == usuarioAtual).ToList();
            redesUsuario = redes.listaRedes.Where(r => r.idUsuario == usuarioAtual).ToList();
            configUsuario = config.listaConfig.Where(x => x.idUsuario == usuarioAtual).First();

            imgPerfil = usuarioAtual + ".png";
        }
    }
}